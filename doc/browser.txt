*browser.txt*                     a www browser plugin for vim

                      Version 0.4. For vim version 6.3

          VIM REFERENCE MANUAL  by Moshe Kaminsky <kaminsky@math.huji.ac.il>

*browser* *browser.vim*

 1. Introduction            |browser-introduction|
 2. Opening a new web page  |browser-opening|
 3. History                 |browser-history|
 4. Uri format              |browser-uri|
 5. Forms                   |browser-forms|
 6. Miscellaneous commands  |browser-miscellaneous|
 7. Mappings                |browser-mappings|
 8. Extra Features          |browser-extra|
 9. Settings                |browser-settings|


This plugin provides basic web browsing and html viewing capabilities. It uses
vim's ability to embed perl, and perl's http modules. The full list of
dependencies is available in the attached "INSTALL" file.

Example:
>
        :Browse vim.sf.net
<
will open a well known web site.

The plugin is not loaded when 'compatible' is set. Loading the plugin can be
disabled by setting "g:browser_plugin_version" before "plugin/browser.vim" is
read.

There is also a standalone script, "vimbrowse.pl", which can be used from the
command line to run vim in browser mode, like any other browser. It contains
its own documentation in pod form. To view it, run
>
        vimbrowse.pl --man
<
or
>
        perldoc vimbrowse.pl
<
or use the included man page.

                                                *browser-documentation*
DOCUMENTATION ~

This help text is translated from the "browser.pod" file in the package
directory.  You can use that file for viewing the documentation from the
command line, like this:
>
        perldoc browser.pod
<
You can also translate it to various formats using the various pod2* programs.

See |add-local-help| for the installation of this file

{Vi does not have any of these features}

=============================================================================
1. Introduction                                 *browser-introduction*

All functionality is available via commands, and some of them have default
keymappings. I tried to make the mappings as compatible as possible with tags.

Similarly, I tried to maintain an analogy between browser windows (which can
be thought of as browser instances, or windows, or tabs) and vim windows, and
between web pages and vim buffers.

Unless stated otherwise, all commands are global, ie, they work in any window,
not only a browser window. Usually, the affected browser window will be the
last one that was active (if the currently active window is a browser window,
it will affected).

All commands except for |:Browse| have two versions: a canonical version with
a "Browser" prefix, which is always available, and a short version, which is
available only if "plugin/browser_short.vim" is used. See |browser-extra| for
details. Some of the commands also have key mappings associated with them.
These mapping are only available if "ftplugin/browser/mappings.vim" is used.
See |browser-mappings| for details.

=============================================================================
2. Opening a new web page                       *browser-opening*

                                        *:Browse*
:Browse {uri} [args]             Open the page with the given {uri}. If there
                                 is an open browser window, open it there,
                                 otherwise open a new browser window
                                 (similarly to the |:help| command). The
                                 height of the window is given by the
                                 'helpheight' option. The {uri} specification
                                 may contain also bookmarks, see |browser-uri|
                                 for details. The page will be displayed
                                 according to its content type, see
                                 |browser-content-type| and |browser-html|.
                                 Alternatively, if a handler for the given
                                 scheme is defined, use it instead of opening,
                                 see |browser-schemes|.

                                 If the page was already opened, it will not
                                 be loaded again, use |:Reload| if you want to
                                 reload it.

                                 If [args] are given, they are appended to the
                                 {uri} as follows: The first argument is
                                 appended as is. Each of the others is
                                 appended with a "&" in front if it contains a
                                 "=", and with a "+" otherwise. This looks
                                 strange, but it allows you to do stuff like
>
        :Browse www.google.com/search?q= foo bar sitesearch=www.sf.net
<
                                 and get the right thing. This concatenation
                                 happens after the expansion of {uri}, so if
                                 you have, in the current address book, a
                                 bookmark "googlesearch" with the above
                                 address, this is equivalent to
>
        :Browse ::googlesearch foo bar sitesearch=www.sf.net
<
                                 (but see also |:Google| for this particular
                                 example).

:BrowserSplit[!] {uri} [args]           *:BrowserSplit* *:SBrowse*
:SBrowse[!] {uri} [args]         Same as |:Browse|, but force splitting a new
                                 window, even if an existing browser window
                                 exists. If "!" is given, split vertically.

<C-R>                                   *browser-<C-R>*
:BrowserReload[!]                       *:BrowserReload* *:Reload*
:Reload[!]                       Reload the current page. If fetching the page
                                 failed, leaves the old content.  If the page
                                 is the result of posting form data (see
                                 |browser-forms|), the browser will prompt the
                                 user whether to re-submit it. Pressing any
                                 key other than "n" will resubmit the post. To
                                 avoid the question (giving a positive
                                 answer), add "!".

CTRL-]                                  *browser-CTRL-]*
g<LeftMouse>                            *browser-g<LeftMouse>*
<C-LeftMouse>                           *browser-<C-LeftMouse>*
:BrowserFollow                          *:BrowserFollow* *:Follow*
:Follow                          Follow the link currently under the cursor.
                                 Obeys the same rules as |:Browse|. (In
                                 particular, the |browser-content-type| rules
                                 apply.)

                                 Naturally, this command will only work when
                                 the currently active window is a browser
                                 window.

                                 For form inputs, this sets the value of the
                                 input under the cursor. See |browser-forms|
                                 for details.

:BrowserSaveLink [file]                 *:BrowserSaveLink* *:SaveLink*
:SaveLink [file]                 Instead of opening the link under the cursor,
                                 save it to a file, given by [file]. If [file]
                                 is not given, the user is prompted to give
                                 one. This will also happen if you |:Follow| a
                                 link whose content type is not supported.
                                 The prompt may be either graphical or
                                 command-line, depending on the "c" flag in
                                 'guioptions'.

                                 Note that this will not work if an external
                                 handler is defined for the scheme of the link
                                 (see |browser-schemes|).


                                                *browser-content-type*
CONTENT-TYPE HANDLING ~

The correct way to display the contents of a given page depends on its content
type. Currently, this plugin supports only two content types: "text/plain" and
"text/html". "text/plain" is displayed as is.  "text/html" is translated to
plain text with some minor markup. See|browser-html| for details about that.

If the content type is not supported, the contents will be saved to a file
instead, as if |:SaveLink| was used (with no [file]).

                                                *browser-images*
IMAGES ~

The vim browser can not display inline images, but it supports saving them to
a file:

:BrowserImageSave [file]                *:BrowserImageSave* *:ImageSave*
:ImageSave [file]                Save the image under the cursor to the given
                                 [file]. If [file] is not given, the user is
                                 prompted for a file name (use the "c" flag of
                                 'guioptions' to switch between graphical and
                                 command-line dialogs).


An image appears as text between "{" and "}". The text is either what the web
page supplies (as the alt attribute) or the word "IMAGE".

=============================================================================
3. History                                      *browser-history*

The browser history is supposed to resemble the tags |tags| mechanism.

[N]CTRL-T                                       *browser-CTRL-T*
[N]g<RightMouse>                                *browser-g<RightMouse>*
[N]<C-RightMouse>                               *browser-<C-RightMouse>*
:[N]BrowserBack                                 *:BrowserBack*
:[N]Back                                        *:Back*
:[N]BrowserPop                                  *:BrowserPop* *:Pop*
:[N]Pop                  Go back N items in the history of the current window.
                         N defaults to 1.

:[N]BrowserForward                              *:BrowserForward*
:[N]Forward                                     *:Forward*
:[N]BrowserTag                                  *:BrowserTag* *:Tag*
:[N]Tag                  Go forward N items in the history of the current
                         window. N defaults to 1.

:BrowserHistory                                 *:BrowserHistory*
:History                                        *:History*
:BrowserTags                                    *:BrowserTags* *:Tags*
:Tags                    Show the history of the current window.


=============================================================================
4. Uri format                                   *browser-uri*

Whenever a uri is required, the uri may have one of several forms. Any
complete uri is acceptable. However, the plugin uses "URI::Heuristic" to
expand anything that does not start with a ":", so most things another browser
would accept, are also acceptable here. If the uri contains a scheme (like
"http:"), it is not modified. See the documentation of "URI::Heuristic" for
details. Uris starting with ":" are reserved for bookmarks.

Note that when specifying a local file relative to the current directory, it
should start with "./", otherwise it will be treated as http.

                                                *browser-bookmarks*
BOOKMARKS ~

The bookmark system works as follows: Bookmarks are stored in files, which
reside in the directory given by |g:browser_addrbook_dir|. Each file in that
directory is considered a bookmarks file.  Each such file contains a list of
aliases to uris. You can then use the syntax ":<file>:<alias>" for a uri. For
example, if you have a bookmark file called "software" which contains an alias
"vim" to "http://vim.sf.net", then
>
        :Browse :software:vim
<
is equivalent to
>
        :Browse http://vim.sf.net
<
Additionally, there is always a "current" bookmark file, initially given by
|g:browser_default_addrbook|, whose name can be omitted. So in the above
example, if "software" is the current file, you can write
>
        :Browse ::vim
<
In fact, you can also drop one of the ":", but the command line completion
will complete bookmark files and not aliases.

The structure of the bookmark file is very simple:
>
        <alias> <uri> <text>
<
Where "alias" is the alias, "uri" is the uri to which it expands (both may not
contain whitespace), and the rest of the line is a comment (usually the title
of the web page). The line should start in the first column. Lines that have
"#" in the first column are ignored and can be used as comments, but note
that, at least currently, if you change or delete a bookmark from within vim,
this file is overwritten, and all comments are lost.

If this file is modified outside of vim after it was used in a session, the
changes won't be take place until you restart vim.

The "uri" field in the bookmark file may contain anything that is valid as a
uri, including other bookmarks, which are expanded recursively.

The bookmarks system can be disabled by setting |g:browser_addrbook_dir| to an
empty string.

:BrowserBookmark {alias}        *:BrowserBookmark* *:Bookmark*
:Bookmark {alias}                Add a bookmark of the current page to the
                                 current bookmark file, under the alias
                                 {alias}. If there is already an alias by that
                                 name, it will be replaced.

:BrowserBookmark! {alias}       *:BrowserBookmark!* *:Bookmark!*
:Bookmark! {alias}               Delete the given alias from the current
                                 bookmark file.

:BrowserAddrBook[!] {name}      *:BrowserAddrBook* *:AddrBook*
:AddrBook[!] {name}              Change the current bookmark file to be the
                                 one given by {name}. {name} is the name of a
                                 file in the directory specified by
                                 |g:browser_addrbook_dir|, as explained above.
                                 If the file does not exist, the command
                                 fails, unless "!" is given, in which case it
                                 is created.

:BrowserListBookmarks [name]    *:BrowserListBookmarks* *:ListBookmarks*
:ListBookmarks [name]            List all bookmarks in the bookmark file
                                 specified by [name]. If [name] is omitted,
                                 the current file is used.


=============================================================================
5. Forms                                        *browser-forms*

Forms are html page areas where the user may supply data to the web server.
This includes, eg, various search services, such as google or
"http://vim.sf.net/search.php".

A form usually consists of several "inputs". An input is one individual data
item in a form. The plugin currently supports all input types. Unless
|g:browser_page_modifiable| is set to 1 (it is 0 by default), the 'modifiable'
option is off for browser pages, so to change the value of a an input, you
need to use the |:Follow| command, or the following:

<CR>                                            *browser-<CR>*
:Click                                          *:Click* *:BrowserClick*
:BrowserClick    The same as |:Follow|, but works only for form inputs. See
                 below for the specific details for each input type.


These commands have different effect for each input type, as follows:

text inputs                                     *browser-text-inputs*

                                                *browser-i_<Tab>*

                                                *browser-i_<S-Tab>*
These are one line areas where the user is expected to enter some text, eg,
search terms. The input will start with "]>", with nothing till the end of the
line. Clicking such an input will just cause vim to enter insert mode.  Note
that the whole input must remain on one line.  Pressing <Tab> or <S-Tab> will
exit insert mode and put the cursor on the next or previous link or input,
just like |:NextLink|.

If you use <Esc> or <CR> to exit insert mode, the page will retain the
'modifiable' state it had before clicking the input, but any other method of
going out of insert mode will not have this effect.

submit inputs                                   *browser-submit-inputs*

The submit button looks like a normal link, usually with the word "Submit" as
its content. Clicking it will submit the data filled in the other inputs of
this form.

radio inputs                                    *browser-radio-inputs*

Radio buttons are used to choose one of several options displayed on the page.
A radio button looks like "(*)" if selected, "( )" otherwise.  Clicking the
button will select it instead of the currently selected one.  There is a extra
way to modify the values of "radio" and "option" inputs:

[N]<C-N>                                *browser-<C-N>*
:[N]BrowserNextChoice                   *:BrowserNextChoice* *:NextChoice*
:[N]NextChoice           Change the value of the input under the cursor, which
                         must be either a radio button or an option, to the
                         N-th next one. N defaults to 1. For radio buttons,
                         but not for options, the operation is cyclic:
                         pressing <C-N> when the selected button is the last
                         one will select the first one. Note that for radio
                         buttons, the cursor need not be on the selected
                         button, but only on one of the buttons from the same
                         group.

[N]<C-P>                                *browser-<C-P>*
:[N]BrowserPrevChoice                   *:BrowserPrevChoice* *:PrevChoice*
:[N]PrevChoice           Same as |:NextChoice| above, but rotate backwards.


option inputs                                   *browser-option-inputs*

There are, in fact, two kinds of option inputs, single valued and multi
valued.

Similarly to radio buttons (see |browser-radio-inputs|), a single valued
option input also allows to choose one value out of several, but only the
currently selected option is displayed. This is usually implemented as a
dropdown menu.  The selected option will appear between square brackets.  When
clicked, the user will be presented with a menu of all possible choices. In
addition, it is possible to cycle through the values (see |:NextChoice|), as
with radio buttons.

Hint: The "v" and "c" flags of 'guioptions' control the behaviour of the menu
when the gui is running.

A multi valued option input allows to have a subset of the values chosen,
instead of one. It is emulated using checkbox buttons (see
|browser-checkbox-inputs|), one for each option.

checkbox inputs                                 *browser-checkbox-inputs*

A checkbox button allows to choose between boolean values. It appears as "[X]"
when selected, "[ ]" otherwise. Clicking it toggles the value.

password inputs                                 *browser-password-inputs*

Password inputs are used for entering secret data, like, well, passwords.
They will appear as "[######]" when a value is set, and as "[______]"
otherwise. Clicking it will prompt the user for the value, using
|inputsecret()|. Unlike the other inputs, this one can not be editted
directly, and clicking it is the only way to set its value.

file inputs                                     *browser-file-inputs*

A file input is used for attaching a file. Clicking it will cause a browse
dialog to open, if possible, and the file to attach should be selected. If the
vim version does not have the |+browse| feature, a regular input prompt will
be used (either graphical or command line, depending on the "c" flag of
'guioptions').

textareas                                       *browser-textareas*

A textarea is an area where a user can enter any amount of plain text. A
textarea appears folded, with two lines composed mainly of "-" characters
showing its start and end lines. Clicking the top line will open a preview
window containing the current text in the textarea. The text can be modified
in this window. Upon leaving the preview window (either by closing it, or by
moving to another window), the text in the browser page will be updated.

In case there are more text lines than the numbers of lines allocated to it on
the browser page, the following commands can be used to scroll the text:

[N]<C-Down>                     *browser-<C-Down>*
:[N]BrowserTextScrollUp         *:BrowserTextScrollUp* *:ScrollUp*
:[N]ScrollUp                     Scroll the text in the text area up N lines.
                                 N defaults to 1. The command only works while
                                 the cursor is on the text area. Note that
                                 scrolling the text up moves the cursor down,
                                 so the mapping makes sense.

[N]<C-Up>                       *browser-<C-Up>*
:[N]BrowserTextScrollDown       *:BrowserTextScrollDown* *:ScrollDown*
:[N]ScrollDown                   Same as |:ScrollUp|, but in the other
                                 direction.

=============================================================================
6. Miscellaneous commands                       *browser-miscellaneous*

:BrowserShowHeader                      *:BrowserShowHeader* *:ShowHeader*
:ShowHeader              Show some of the header fields in the current page.

:BrowserHideHeader                      *:BrowserHideHeader* *:HideHeader*
:HideHeader              Hide fields that were displayed by |:ShowHeader|.

:BrowserViewSource[!]                   *:BrowserViewSource* *:ViewSource*
:ViewSource[!]           Open a new window, with the source of the current
                         page displayed. If "!" is given, split vertically.

[N]<Tab>                                *browser-<Tab>*
:[N]BrowserNextLink                     *:BrowserNextLink* *:NextLink*
:[N]NextLink             Jump to the N-th next link, from the current cursor
                         position. N defaults to 1. Works only in a browser
                         window.

[N]<S-Tab>                              *browser-<S-Tab>*
:[N]BrowserPrevLink                     *:BrowserPrevLink* *:PrevLink*
:[N]PrevLink             Same as |:NextLink|, but backwards.


=============================================================================
7. Mappings                                     *browser-mappings*

Unless mentioned otherwise, the key mappings are only available if the
"ftplugin/browser/mappings.vim" file from the "extra" directory is installed.
The following key mappings are available:
 *  <C-]>, g<LeftMouse>, <C-LeftMouse>: follow link or click form input under
    the cursor (|:BrowserFollow|)
 *  <C-T>, g<RightMouse>, <C-RightMouse>: go back in history (|:BrowserBack|)
 *  <C-R>: Reload the current page (|:Reload|)
 *  <Tab>, <S-Tab>: next/previous link, also in insert mode
    (|:BrowserNextLink|)
 *  <C-N>, <C-P>: Rotate input value, for radio buttons and options
    (|:BrowserNextChoice|)
 *  <CR>: Click form input, change value or submit (|:BrowserClick|). In
    insert mode, <CR> is mapped to <Esc>, but this might change in a future
    version.
 *  <C-S>: Search the web for the current or selected words, using the current
    default search engine.  Only available if "plugin/browser_extra.vim" is
    installed.  (|:Search|).
 *  <C-K>: Lookup the word under the cursor in the current default keyword
    lookup facility. Only available if "plugin/browser_extra.vim" is
    installed.  (|:Keyword|).
                                                *browser-<Space>*
 *  <Space>: Scroll one page forward
                                                *browser-b*
 *  b: Scroll one page backward
                                                *browser-q*
 *  q: Close the browser window


=============================================================================
8. Extra Features                               *browser-extra*

Some features are available only if the files in the "extra" directory of the
distribution are installed. This is so to avoid possible incompatibility with
other plugins and with user settings. The rest of the plugin does not depend
on them, and they can be freely modified (though it is still preferable to do
the modifications elsewhere, to prevent overwriting by a later version). They
provide the following features:

"ftplugin/browser/mappings.vim"                 *browser-mappings.vim*

Key mappings available in the browser window. See |browser-mappings| for
details.

"plugin/browser_short.vim"                      *browser-browser_short.vim*

Short version of commands. Contains the definitions of all commands that do
not start with the "Browser" prefix, except for |:Browse|, which is part of
the main package. The loading of this plugin can be avoided even if it is
installed, by setting the |g:browser_short_version| variable.

"syntax/browser_highlight.vim"                  *browser-browser_highlight.vim*

Highlight definitions corresponding to some html tags. Tries to setup a
minimal highlighting for tags like "bold", trying to maintain their original
meaning. Can be overriden by later settings, or by setting
|g:browser_{attr}_highlight| variables.

"plugin/browser_extra.vim"                      *browser-browser_extra.vim*

Provides some extra convinience commands. Currently contains the commands and
mappings for searching the web (see |browser-searching|), as well as the
following commands:

                                                *browser-vim-site*

                                                                *:VimSearch*
:VimSearch {type} {words}        Search the vim site for an item of the given
                                 {type}, containing the given {words}. {type}
                                 may be any of the possible script types on
                                 the vim site ("colorscheme", "indent", etc.),
                                 "tip" for finding a tip, and "script" to find
                                 any script.

                                                                *:VimScript*
:VimScript {id}                  Open the page of the vim script with the
                                 given {id}

                                                                *:VimTip*
:VimTip {id}                     Open the tip with the given {id}


                                                *browser-searching*
SEARCHING THE WEB ~

The special bookmarks file "_search" contains addresses of both general
purpose and specific search engines. Several commands make use of this file:

                                                *:SearchUsing*
:SearchUsing {facility} [words]  Search the web for [words], using the given
                                 {facility}. {facility} is one of the
                                 bookmarks in that file. If no word is given,
                                 use the word under the cursor. For example,
>
        :SearchUsing google foo bar
<
                                 will search these words with google.

[{visual}]<C-S>                                 *browser-<C-S>* *:Search*
:Search [words]                  Search using the facility given by the
                                 |g:browser_search_engine| variable. If no
                                 words are given, use the current word. This
                                 variable can be set in a filetype plugin, to
                                 reflect different search sites for different
                                 purposes.

                                 For example, you might have
>
        let g:browser_search_engine = 'perldoc'
<
                                 in your "perl.vim" ftplugin,
>
        let g:browser_search_engine = 'vimdoc'
<
                                 in the "vim.vim" plugin, etc.

                                 (If you have useful sites to put here, please
                                 send them to me!)

                                 <C-S> searches the word under the cursor, or
                                 the words selected in the visual region, if
                                 used for {visual}.

<C-K>                                           *browser-<C-K>* *:Keyword*
:Keyword [word]                  Same as |:Search|, but at only one word is
                                 allowed, and uses |g:browser_keyword_search|
                                 instead of |g:browser_search_engine|.

:Google [words]                                 *:Google*
:Dictionary [word]                              *:Dictionary* *:Thesaurus*
:Thesaurus [words]               Shortcuts for |:SearchUsing|, with {facility}
                                 set to google, dictionary or thesaurus,
                                 respectively.


There is also a command for searching the vim site, |:VimSearch|

Loading of this plugin can be avoided by setting |g:browser_extra_version|.

=============================================================================
9. Settings                                     *browser-settings*

All settings are controlled by global variables whose name start with
"browser_". Some examples and default values are given in the beginning of the
"browser.vim" plugin. The recommended place for setting these variables is
"after/plugin/browser.vim" (in some directory in the 'runtimepath').

Setting most variables will also have effect after the plugin is loaded.
Exceptions are |g:browser_from_header| and |g:browser_cookies_file|.

                                        *g:browser_data_dir*
g:browser_data_dir               Default: The "browser" sub directory of the
                                 first writeable directory in'runtimepath'.

                                 The directory where all the plugin's related
                                 data is maintained.

                                        *g:browser_addrbook_dir*
g:browser_addrbook_dir           Default: The "addressbooks" sub directory of
                                 |g:browser_data_dir|.

                                 The directory where bookmark files are
                                 stored. Any file in this directory is
                                 considered to be a bookmarks file. See
                                 |browser-bookmarks| for details.

                                 To disable the whole bookmarks system, set
                                 this option to the empty string.

                                        *g:browser_default_addrbook*
g:browser_default_addrbook       Default: "default"

                                 The default "current" bookmarks file. See
                                 |browser-bookmarks| for details.

                                        *g:browser_page_modifiable*
g:browser_page_modifiable        Default: 0

                                 If set to a false value (such as 0), the
                                 browser buffers are not modifiable.  This
                                 makes it safer, since accidentally changing
                                 lines will make links unusable. It also looks
                                 much better with the "conceal" patch. The
                                 only drawback is that a restricted set of
                                 operations is available for editing form
                                 inputs (see |browser-forms| for details). But
                                 since the only input type which requires
                                 substantial editing, the textarea, is
                                 modified in another buffer, it's not a severe
                                 restriction.

                                 Setting it to 1 will revert to the situation
                                 in the versions before 0.4, that the page is
                                 modifiable.

                                        *g:browser_search_engine*
g:browser_search_engine          Default: "google"

                                 The search facility to use with the |:Search|
                                 command.  See |browser-searching| for
                                 details.

                                        *g:browser_keyword_search*
g:browser_keyword_search         Default: "dictionary"

                                 The search facility to use with the
                                 |:Keyword| command. See |browser-searching|
                                 for details.

                                        *g:browser_from_header*
g:browser_from_header            Default: "$EMAIL"

                                 The e-mail address to send in the GET request
                                 for web pages.

                                        *g:browser_cookies_file*
g:browser_cookies_file           Default: "cookies.txt" in
                                 |g:browser_data_dir|.

                                 The name of the file where cookies are
                                 stored. Set to empty to disable cookies.

                                        *g:browser_assumed_encoding*
g:browser_assumed_encoding       Default: "utf-8"

                                 The web page encoding to assume, if it can
                                 not be deduced from the page headers.

g:browser_plugin_version                *g:browser_plugin_version*
g:browser_short_version                 *g:browser_short_version* 
                                        *g:browser_extra_version*
g:browser_extra_version          These variables are set to the plugin version
                                 in the files"plugin/browser.vim",
                                 "plugin/browser_short.vim"
                                 and"plugin/browser_extra.vim", resp. If they
                                 are defined before thecorresponding plugin is
                                 loaded, the loading of that plugin is
                                 prevented.


                                                *browser-html*
HTML FORMATTING ~

If the type of the page is html, the plugin will translate it to text, with
some simple markup, and will use syntax highlighting accordingly. Some of this
markup is hard-coded (for example, links will always appear between "<<" and
">>"). But some of it can be controlled by the settings bellow:

                                                *g:browser_{attr}_start*
g:browser_{attr}_start           Define the markup for the start of a text
                                 with the given attribute. This is the text
                                 that will occur before the actual text with
                                 this attribute. See |browser-html-attributes|
                                 for the list of possible attributes.

                                                *g:browser_{attr}_end*
g:browser_{attr}_end             Define the markup for the end of a text with
                                 the given attribute. This must exist whenever
                                 the corresponding |g:browser_{attr}_start|
                                 exists.

                                                *g:browser_{attr}_highlight*
g:browser_{attr}_highlight       The highlight group to use for text with this
                                 attribute. This can be omitted, and then the
                                 highlighting should be defined manually. The
                                 highlight group is called browser_{attr}.


The text given by the start and end variables will be highlighted with the
"Ignore" group, and if you have the "conceal" patch (try |:syn-conceal|), it
will be concealed.

Note that there is a difference between defining |g:browser_{attr}_start| to
be empty, and not defining it at all: In the first case, there will certainly
be no markup. In the second, markup may be inherited from a different
attribute, as summarized in |browser-html-attributes|.

Example: the plugin defines the following defaults:
>
        let g:browser_bold_start='_*'
        let g:browser_bold_end='*_'
        let g:browser_bold_highlight='Bold'
        let g:browser_italic_start='_/'
        let g:browser_italic_end='/_'
        let g:browser_italic_highlight='UnderLine'
<
This implies that italic text will appear like _/this/_ in the translated
text, and will be highlighted with the "UnderLine" group (except for the  "_/"
and "/_", which will be hidden). On the other hand,  "g:browser_em_start" is
not defined, so it will appear the same as italic.

Default highlighting for these groups is available when
"syntax/browser_highlight.vim" from the "extra" directory is installed (see
|browser-extra|).

Html attributes                                 *browser-html-attributes*

The following table summarizes the possible attributes. The first column gives
the attribute name, as should appear in the variable name. The second column
gives the corresponding HTML tag. The third column gives the fallback
attribute, in case |g:browser_{attr}_start| is undefined.
>
        attr            tag             fallback
        -----------------------------------------
        bold            b
        italic          i
        underline       u
        teletype        tt
        strong          strong          bold
        em              em              italic
        code            code            teletype
        kbd             kbd             teletype
        samp            samp            teletype
        var             var             teletype
        definition      dfn             underline
<
                                                *browser-schemes*
SCHEMES ~

The "scheme" of a uri is its first component, eg, "http". In principle, the
plugin can fetch the contents of a uri with any scheme except for "mailto"
(where it makes no sense). However, usually that's not desirable, since there
are only few content types that the plugin supports. For example, for an "ftp"
uri of a remote directory, what you really want is to enter the directory, get
some files, etc.

                                                *browser-handlers*
For this reason, it is possible to define external handlers associated with a
given scheme.

                                                *g:browser_{scheme}_handler*
g:browser_{scheme}_handler       Define the external program given by the
                                 value of this variable to handle uris with
                                 scheme {scheme}. The escape sequence "%s"
                                 will be replaced by the full uri in question.


Once a handler is defined, it is used whenever a uri of this type is requested
(eg, in |:Browse| commands, when following a link, etc.).  This is done after
the uri expansion, so bookmarks whose target is such a uri are affected as
well.

For example, the definition
>
        let g:browser_mailto_handler = 'xterm -e mutt %s &'
<
in the plugin will cause "mutt(1)" to be opened in a an "xterm(1)" whenever a
"mailto:" plugin is encountered. Note the "&" in the end, which allows you to
continue browsing while the program is open.


 vim:tw=78:ts=8:ft=help:norl:
